FROM openjdk:11-jre-slim-buster

# packaging dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        dh-make \
        fakeroot \
        build-essential \
        devscripts && \
    rm -rf /var/lib/apt/lists/*

# packaging
ARG PKG_VERS
ARG PKG_REV
ARG RUNTIME_VERSION
ARG DOCKER_VERSION

ENV DEBFULLNAME "NVIDIA CORPORATION"
ENV DEBEMAIL "cudatools@nvidia.com"
ENV REVISION "$PKG_VERS-$PKG_REV"
ENV DOCKER_VERSION $DOCKER_VERSION
ENV RUNTIME_VERSION $RUNTIME_VERSION
ENV SECTION ""

# output directory
ENV DIST_DIR=/tmp/nvidia-docker2-$PKG_VERS
RUN mkdir -p $DIST_DIR /dist

# nvidia-docker 2.0
COPY nvidia-docker $DIST_DIR/nvidia-docker
COPY daemon.json $DIST_DIR/daemon.json

WORKDIR $DIST_DIR
COPY debian ./debian

RUN sed -i "s;@VERSION@;${REVISION};" debian/changelog && \
    sed -i "s;@VERSION@;${PKG_VERS};" $DIST_DIR/nvidia-docker && \
    if [ "$REVISION" != "$(dpkg-parsechangelog --show-field=Version)" ]; then exit 1; fi

CMD export DISTRIB="unstable" && \
    debuild --preserve-env --dpkg-buildpackage-hook='sh debian/prepare' -i -us -uc -b && \
    mv /tmp/*.deb /dist

# Add GDAL stuff

# UTF-8 all the things
RUN \
    apt-get clean -y && apt-get update && \
    apt-get install -y apt-utils locales && \
    echo "LC_ALL=en_US.UTF-8" >> /etc/environment && \
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && \
    echo "LANG=en_US.UTF-8" > /etc/locale.conf && \
    locale-gen en_US.UTF-8 && \
    apt-get clean all && \
    rm -rf /var/lib/apt/lists/*

# ENVs
ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8
ENV ROOTDIR /tmp/gdal
RUN mkdir -p $ROOTDIR/src
WORKDIR $ROOTDIR/

# pkg-config needed by gdal to find openjpeg
# gdal uses curl, libcurl4, libproj
# gdal build uses cmake
RUN \
    apt-get update && \
    apt-get install -y \
        ocl-icd-opencl-dev \
        pkg-config \
        software-properties-common \
        python3-software-properties \
        python3-pip \
        python3-setuptools \
        gcc \
        g++ \
        curl \
        build-essential \
        libcurl4-gnutls-dev \
        libproj-dev \
        bash-completion \
        cmake \
        wget \
    && \
    apt-get clean all && \
    rm -rf /var/lib/apt/lists/*

# Install Pip and AWS CLI
RUN pip3 install --upgrade pip awscli

# OPENJPEG versions prior to 2.3.0 have problems processing large jp2 files
# https://lists.osgeo.org/pipermail/gdal-dev/2017-October/047397.html
ENV OPENJPEG_VERSION 2.3.1

# Compile and install OpenJPEG for GDAL
RUN \
    cd $ROOTDIR/src && \
    wget -q https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz && \
    tar -xvf v${OPENJPEG_VERSION}.tar.gz && \
    cd openjpeg-${OPENJPEG_VERSION}/ && \
    mkdir build && \
    cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local && \
    make -j4 && \
    make install && \
    rm -Rf $ROOTDIR/src/openjpeg* $ROOTDIR/src/v${OPENJPEG_VERSION}.tar.gz

ENV GDAL_VERSION 2.4.2

# Compile and install GDAL
# JPEG2000 - used by Sentinel-2, use openjpeg and none of the others
# GeoTIFF - included, use internal version
RUN \
    cd $ROOTDIR/src && \
    wget http://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz && \
    tar -xvf gdal-${GDAL_VERSION}.tar.gz && \
    cd gdal-${GDAL_VERSION} && \
    ./configure \
        --prefix=/usr/local \
        --with-geos \
        --with-curl \
        --with-openjpeg \
        --with-jpeg \
        --with-geotiff=internal \
        --with-hide-internal-symbols \
        --with-libtiff=internal \
        --with-libz=internal \
        --with-threads \
        --with-opencl=yes \
        --with-opencl-include=/usr/include \
        --with-opencl-lib="-L/usr/lib/x86_64-linux-gnu -lOpenCL" \
        --without-bsb \
        --without-cfitsio \
        --without-cryptopp \
        --without-ecw \
        --without-expat \
        --without-fme \
        --without-freexl \
        --without-gif \
        --without-gif \
        --without-gnm \
        --without-grass \
        --without-grib \
        --without-hdf4 \
        --without-hdf5 \
        --without-idb \
        --without-ingres \
        --without-jasper \
        --without-jp2mrsid \
        --without-kakadu \
        --without-libgrass \
        --without-libkml \
        --without-libtool \
        --without-mrf \
        --without-mrsid \
        --without-mysql \
        --without-netcdf \
        --without-odbc \
        --without-ogdi \
        --without-pcidsk \
        --without-pcraster \
        --without-pcre \
        --without-perl \
        --without-pg \
        --without-png \
        --without-python \
        --without-qhull \
        --without-sde \
        --without-sqlite3 \
        --without-webp \
        --without-xerces \
        --without-xml2 | tee /dev/stderr | grep "OpenJPEG support:\s\+yes" \
    && \
    make -j8 && \
    make install && \
    rm -Rf /tmp/gdal && \
    ldconfig

# Final apt-get cleanup
RUN rm -rf /var/lib/apt/lists/* && apt-get autoremove -y && apt-get clean all

WORKDIR $DIST_DIR
